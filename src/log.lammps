LAMMPS (21 Nov 2023)
units		    si
boundary	    f f f

atom_style	    sphere
neighbor        0.1 bin
neigh_modify	delay 0 every 1 check yes
comm_modify     vel yes

read_data       ${data_file}
read_data       ../data_ins/seq_eval_data_id199_seed0_period0.0666_period0.05
Reading data file ...
  triclinic box = (-0.1 -0.1 -0.05) to (0.8 0.8 0.15) with tilt (0 0 0)
  1 by 1 by 1 MPI processor grid
  reading atoms ...
  49 atoms
  read_data CPU = 0.001 seconds
#read_data       data_file

region		    outerbox block -0.05 0.635 -0.05 0.5176545 -0.05 0.05


pair_style      granular
pair_coeff      * * hooke 6000 10 tangential linear_history 1715 0.5 0.3 damping mass_velocity
fix		        box all wall/gran/region hooke/history 30000.0 NULL 10.0 NULL 0.5 1 region outerbox

timestep	    0.001
thermo		    500

fix		        1 all nve/sphere
fix             2 all gravity -9.8 vector 0 0 1

#energy minimization

run             2000
Generated 0 of 1 mixed pair_coeff terms from geometric mixing rule
Neighbor list info ...
  update: every = 1 steps, delay = 0 steps, check = yes
  max neighbors/atom: 2000, page size: 100000
  master list distance cutoff = 0.2
  ghost atom cutoff = 0.2
  binsize = 0.1, bins = 9 9 2
  1 neighbor lists, perpetual/occasional/extra = 1 0 0
  (1) pair granular, perpetual
      attributes: half, newton on, size, history
      pair build: half/size/bin/newton/tri
      stencil: half/bin/3d/tri
      bin: standard
Per MPI rank memory allocation (min/avg/max) = 11.32 | 11.32 | 11.32 Mbytes
   Step          Temp          E_pair         E_mol          TotEng         Press     
         0   0              0              0              0              1333.3333    
       500   1.6121067e+18  0              0              0.0016025441   1127.9302    
      1000   1.8319588e+16  0              0              1.8210922e-05  1125.9659    
      1500   2.7942289e+14  0              0              2.7776543e-07  1125.8017    
      2000   3.8041548e+12  0              0              3.7815896e-09  1125.8016    
Loop time of 0.072436 on 1 procs for 2000 steps with 49 atoms

45.1% CPU use with 1 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.051252   | 0.051252   | 0.051252   |   0.0 | 70.75
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.00076085 | 0.00076085 | 0.00076085 |   0.0 |  1.05
Output  | 3.8072e-05 | 3.8072e-05 | 3.8072e-05 |   0.0 |  0.05
Modify  | 0.015204   | 0.015204   | 0.015204   |   0.0 | 20.99
Other   |            | 0.005181   |            |       |  7.15

Nlocal:             49 ave          49 max          49 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:              0 ave           0 max           0 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:            316 ave         316 max         316 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 316
Ave neighs/atom = 6.4489796
Neighbor list builds = 0
Dangerous builds = 0


##################################
######### vibration sims #########
##################################



variable A equal ${amplitude}
variable A equal 0.005
variable p1 equal ${period1}
variable p1 equal 0.0666
variable p2 equal ${period2}
variable p2 equal 0.05

variable omega equal 2.0*3.1415/${p1}
variable omega equal 2.0*3.1415/0.0666
variable omega2 equal 2.0*3.1415/${p2}
variable omega2 equal 2.0*3.1415/0.05


group		input1 id ${source_node1}
group		input1 id 13
1 atoms in group input1
group		input2 id ${source_node2}
group		input2 id 41
1 atoms in group input2
group		output id ${output_node}
group		output id 23
1 atoms in group output
group       ins_out id ${source_node1} ${source_node2} ${output_node}
group       ins_out id 13 ${source_node2} ${output_node}
group       ins_out id 13 41 ${output_node}
group       ins_out id 13 41 23
3 atoms in group ins_out



if "${case} == 0100" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))' 	'fix 6 input2 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1000" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))' 	'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1100" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))' 	'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL' 	'fix 7 input2 move variable v_x NULL NULL v_v NULL NULL'
variable x equal swiggle(0.0,$A,${p1})
variable x equal swiggle(0.0,0.005,${p1})
variable x equal swiggle(0.0,0.005,0.0666)
variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))
variable v equal v_omega*(0.005-cwiggle(0.0,$A,${p1}))
variable v equal v_omega*(0.005-cwiggle(0.0,0.005,${p1}))
variable v equal v_omega*(0.005-cwiggle(0.0,0.005,0.0666))
fix 6 input1 move variable v_x NULL NULL v_v NULL NULL
fix 7 input2 move variable v_x NULL NULL v_v NULL NULL
if "${case} == 0001" then     'variable x equal swiggle(0.0,$A,${p2})' 	'variable v equal v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input2 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 0101" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input2 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1001" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))'     'variable x2 equal swiggle(0.0,$A,${p2})' 	'variable v2 equal v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL' 	'fix 7 input2 move variable v_x2 NULL NULL v_v2 NULL NULL'
if "${case} == 1101" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))'     'variable x2 equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v2 equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL'     'fix 7 input2 move variable v_x2 NULL NULL v_v2 NULL NULL'
if "${case} == 0010" then     'variable x equal swiggle(0.0,$A,${p2})' 	'variable v equal v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 0110" then     'variable x equal swiggle(0.0,$A,${p1})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))'     'variable x2 equal swiggle(0.0,$A,${p2})' 	'variable v2 equal v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'fix 6 input2 move variable v_x NULL NULL v_v NULL NULL' 	'fix 7 input1 move variable v_x2 NULL NULL v_v2 NULL NULL'
if "${case} == 1010" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1110" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'variable x2 equal swiggle(0.0,$A,${p1})' 	'variable v2 equal v_omega*($A-cwiggle(0.0,$A,${p1}))' 	'fix 6 input2 move variable v_x2 NULL NULL v_v2 NULL NULL'     'fix 7 input1 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 0011" then     'variable x equal swiggle(0.0,$A,${p2})' 	'variable v equal v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL' 	'fix 7 input2 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 0111" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'variable x2 equal swiggle(0.0,$A,${p2})' 	'variable v2 equal v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input1 move variable v_x2 NULL NULL v_v2 NULL NULL'     'fix 7 input2 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1011" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'variable x2 equal swiggle(0.0,$A,${p2})' 	'variable v2 equal v_omega2*($A-cwiggle(0.0,$A,${p2}))' 	'fix 6 input2 move variable v_x2 NULL NULL v_v2 NULL NULL'     'fix 7 input1 move variable v_x NULL NULL v_v NULL NULL'
if "${case} == 1111" then     'variable x equal swiggle(0.0,$A,${p1})+swiggle(0.0,$A,${p2})' 	'variable v equal v_omega*($A-cwiggle(0.0,$A,${p1}))+v_omega2*($A-cwiggle(0.0,$A,${p2}))'     'fix 6 input1 move variable v_x NULL NULL v_v NULL NULL' 	'fix 7 input2 move variable v_x NULL NULL v_v NULL NULL'


#fix             3 input move wiggle 0.0 0.01 0.00 0.05


if              "${visualize} == False" then                     'dump 1 output custom 5 ../dumps/period${p1}_period${p2}/dump.${method}_eval_seed${seed}_id${id}_${case} id x y'
dump 1 output custom 5 ../dumps/period${p1}_period${p2}/dump.${method}_eval_seed${seed}_id${id}_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period${p2}/dump.${method}_eval_seed${seed}_id${id}_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period0.05/dump.${method}_eval_seed${seed}_id${id}_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period0.05/dump.seq_eval_seed${seed}_id${id}_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period0.05/dump.seq_eval_seed0_id${id}_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period0.05/dump.seq_eval_seed0_id199_${case} id x y
dump 1 output custom 5 ../dumps/period0.0666_period0.05/dump.seq_eval_seed0_id199_1100 id x y

if              "${visualize} == True" then                     'dump 1  all  custom 5 ${method}_eval_materials/dump.${method}_eval_seed${seed}_id${id}_${case}_XOR_AND id x y z radius fx fy fz mass'

run		        2000
Generated 0 of 1 mixed pair_coeff terms from geometric mixing rule
WARNING: One or more atoms are time integrated more than once (../modify.cpp:289)
Per MPI rank memory allocation (min/avg/max) = 12.07 | 12.07 | 12.07 Mbytes
   Step          Temp          E_pair         E_mol          TotEng         Press     
      2000   3.8041548e+12  0              0              3.7815896e-09  1125.8016    
      2500   7.4414523e+20  0              0              0.73973118     1129.4239    
      3000   7.2941868e+20  0              0              0.72509198     1128.4232    
      3500   7.1916804e+20  0              0              0.71490214     1128.1795    
      4000   7.0156037e+20  0              0              0.69739892     1127.5711    
Loop time of 0.11548 on 1 procs for 2000 steps with 49 atoms

57.1% CPU use with 1 MPI tasks x no OpenMP threads

MPI task timing breakdown:
Section |  min time  |  avg time  |  max time  |%varavg| %total
---------------------------------------------------------------
Pair    | 0.035671   | 0.035671   | 0.035671   |   0.0 | 30.89
Neigh   | 0          | 0          | 0          |   0.0 |  0.00
Comm    | 0.00091946 | 0.00091946 | 0.00091946 |   0.0 |  0.80
Output  | 0.007494   | 0.007494   | 0.007494   |   0.0 |  6.49
Modify  | 0.069329   | 0.069329   | 0.069329   |   0.0 | 60.04
Other   |            | 0.002067   |            |       |  1.79

Nlocal:             49 ave          49 max          49 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Nghost:              0 ave           0 max           0 min
Histogram: 1 0 0 0 0 0 0 0 0 0
Neighs:            316 ave         316 max         316 min
Histogram: 1 0 0 0 0 0 0 0 0 0

Total # of neighbors = 316
Ave neighs/atom = 6.4489796
Neighbor list builds = 0
Dangerous builds = 0
Total wall time: 0:00:00


